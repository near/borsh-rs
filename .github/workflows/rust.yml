
name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-build
    - name: Build
      run: RUSTFLAGS='-D warnings' cargo build --verbose --workspace

  tests:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-tests
    - name: Run tests
      run: |
        RUSTFLAGS='-D warnings' cargo test --verbose --workspace
        cd borsh && cargo test --verbose --no-default-features
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
        tar xzf master.tar.gz &&	  tar xzf master.tar.gz &&
        cd kcov-master &&	  cd kcov-master &&
        mkdir build &&	  mkdir build &&
        cd build &&	  cd build &&
        cmake .. &&	  cmake .. &&
        make &&	  make &&
        make install DESTDIR=../../kcov-build &&	  make install DESTDIR=../../kcov-build &&
        cd ../.. &&	  cd ../.. &&
        rm -rf kcov-master &&	  rm -rf kcov-master &&
        for file in target/debug/*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&	  for file in target/debug/*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
        bash <(curl -s https://codecov.io/bash) &&	  bash <(curl -s https://codecov.io/bash) &&
        echo "Uploaded code coverage"	  echo "Uploaded code coverage"


  clippy:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-clippy
    - name: Run clippy
      run: |
        pwd
        echo *
        cargo clippy -- -D clippy::all

  cargo-fmt:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Run cargo fmt
      run: cargo fmt --all -- --check
