name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: '-D warnings'
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  tests:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Run tests
      run: |
        cargo test --verbose --workspace
        sudo apt install libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev
        cd borsh
        cargo test --verbose # --no-default-features
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
        tar xzf master.tar.gz
        cd kcov-master
        mkdir build
        cd build
        cmake ..
        make
        make install DESTDIR=../../kcov-build
        cd ../..
        rm -rf kcov-master
        for file in target/debug/*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done
        bash <(curl -s https://codecov.io/bash)
        echo "Uploaded code coverage"	  echo "Uploaded code coverage"

  clippy:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Run clippy
      run: cargo clippy -- -D clippy::all

  cargo-fmt:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Run cargo fmt
      run: cargo fmt --all -- --check

  publish:
    runs-on: ubuntu-20.04
    needs: [tests, clippy, cargo-fmt]
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v2
    - name: Setup
      run: |
        git config user.name github-actions
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        cargo install --git https://github.com/miraclx/cargo-workspaces --rev b2d49b9e575e29fd2395352e4d0df47def025039 cargo-workspaces

    - name: Publish to crates.io and tag the commit responsible
      id: version-tag-and-publish
      run: |
        cargo ws publish --all --yes --exact \
          --skip-published --no-git-commit --allow-dirty \
          --tag-existing --tag-prefix 'v' \
          --tag-msg 'crates.io snapshot' --tag-msg $'%{\n - %n: https://crates.io/crates/%n/%v}' \
          --no-individual-tags --no-git-push
        echo "GIT_LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
        echo "Latest git tag is ${{ env.GIT_LATEST_TAG }}"
        echo "::set-output name=git_tag_message::$(git tag -l --format='%(body)' ${{ env.GIT_LATEST_TAG }})"

    - name: Push tags to GitHub (if any)
      run: git push --tags

    - name: Extract release notes
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@c24866884b7a0d2fd2095be2e406b6f260479da8

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.GIT_LATEST_TAG }}
        release_name: ${{ env.GIT_LATEST_TAG }}
        body: |
          ${{ steps.extract-release-notes.outputs.release_notes }}

          #### Crate Links

          ${{ steps.version-tag-and-publish.outputs.git_tag_message }}
