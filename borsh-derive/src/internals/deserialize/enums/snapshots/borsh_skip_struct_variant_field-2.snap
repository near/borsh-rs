---
source: borsh-derive/src/internals/deserialize/enums/mod.rs
expression: pretty_print_syn_str(actual).unwrap()
---
impl borsh::de::BorshDeserializeAsync for AA {
    async fn deserialize_reader<__R: borsh::async_io::AsyncRead>(
        reader: &mut __R,
    ) -> ::core::result::Result<Self, borsh::io::Error> {
        let tag = <u8 as borsh::de::BorshDeserializeAsync>::deserialize_reader(reader)
            .await?;
        <Self as borsh::de::EnumExtAsync>::deserialize_variant(reader, tag).await
    }
}
impl borsh::de::EnumExtAsync for AA {
    async fn deserialize_variant<__R: borsh::async_io::AsyncRead>(
        reader: &mut __R,
        variant_tag: u8,
    ) -> ::core::result::Result<Self, borsh::io::Error> {
        let return_value = if variant_tag == 0u8 {
            AA::B {
                c: ::core::default::Default::default(),
                d: <u32 as borsh::BorshDeserializeAsync>::deserialize_reader(reader)
                    .await?,
            }
        } else if variant_tag == 1u8 {
            AA::NegatedVariant {
                beta: <u8 as borsh::BorshDeserializeAsync>::deserialize_reader(reader)
                    .await?,
            }
        } else {
            return ::core::result::Result::Err(
                borsh::io::Error::new(
                    borsh::io::ErrorKind::InvalidData,
                    borsh::__private::maybestd::format!(
                        "Unexpected variant tag: {:?}", variant_tag
                    ),
                ),
            )
        };
        ::core::result::Result::Ok(return_value)
    }
}
