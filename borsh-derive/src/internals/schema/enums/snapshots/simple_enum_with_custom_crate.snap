---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl reexporter::borsh::BorshSchema for A {
    fn declaration() -> reexporter::borsh::schema::Declaration {
        "A".to_string()
    }
    fn add_definitions_recursively(
        definitions: &mut reexporter::borsh::__private::maybestd::collections::BTreeMap<
            reexporter::borsh::schema::Declaration,
            reexporter::borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(reexporter::borsh::BorshSchema)]
        #[borsh(crate = "reexporter :: borsh")]
        struct ABacon;
        #[allow(dead_code)]
        #[derive(reexporter::borsh::BorshSchema)]
        #[borsh(crate = "reexporter :: borsh")]
        struct AEggs;
        <ABacon as reexporter::borsh::BorshSchema>::add_definitions_recursively(
            definitions,
        );
        <AEggs as reexporter::borsh::BorshSchema>::add_definitions_recursively(
            definitions,
        );
        let definition = reexporter::borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: reexporter::borsh::__private::maybestd::vec![
                (u8::from(0u8) as i64, "Bacon".into(), < ABacon as
                reexporter::borsh::BorshSchema > ::declaration()), (u8::from(1u8) as i64,
                "Eggs".into(), < AEggs as reexporter::borsh::BorshSchema >
                ::declaration())
            ],
        };
        reexporter::borsh::schema::add_definition(
            <Self as reexporter::borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}

