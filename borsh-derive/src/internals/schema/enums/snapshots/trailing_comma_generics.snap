---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<B, A> borsh::BorshSchema for Side<B, A>
where
    A: Display + Debug,
    B: Display + Debug,
    B: borsh::BorshSchema,
    A: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < B as borsh::BorshSchema > ::declaration(), < A as borsh::BorshSchema >
            ::declaration()
        ];
        format!(r#"{}<{}>"#, "Side", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct SideLeft<A>(
            A,
        )
        where
            A: Display + Debug;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct SideRight<B>(
            B,
        )
        where
            B: Display + Debug;
        <SideLeft<A> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <SideRight<B> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (u8::from(0u8) as i64, "Left".into(), < SideLeft < A > as
                borsh::BorshSchema > ::declaration()), (u8::from(1u8) as i64, "Right"
                .into(), < SideRight < B > as borsh::BorshSchema > ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}

