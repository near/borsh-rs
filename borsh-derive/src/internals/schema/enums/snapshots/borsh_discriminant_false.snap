---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl borsh::BorshSchema for X {
    fn declaration() -> borsh::schema::Declaration {
        "X".to_string()
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct XA;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct XB;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct XC;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct XD;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct XE;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct XF;
        <XA as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <XB as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <XC as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <XD as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <XE as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <XF as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (u8::from(0u8) as i64, "A".into(), < XA as borsh::BorshSchema >
                ::declaration()), (u8::from(1u8) as i64, "B".into(), < XB as
                borsh::BorshSchema > ::declaration()), (u8::from(2u8) as i64, "C".into(),
                < XC as borsh::BorshSchema > ::declaration()), (u8::from(3u8) as i64, "D"
                .into(), < XD as borsh::BorshSchema > ::declaration()), (u8::from(4u8) as
                i64, "E".into(), < XE as borsh::BorshSchema > ::declaration()),
                (u8::from(5u8) as i64, "F".into(), < XF as borsh::BorshSchema >
                ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}

