---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<C: Eq, W> borsh::BorshSchema for A<C, W>
where
    W: Hash,
    W: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![< W > ::declaration()];
        format!(r#"{}<{}>"#, "A", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ABacon;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct AEggs;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ASalad<C: Eq>(Tomatoes, #[borsh(skip)] C, Oil);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ASausage<W>
        where
            W: Hash,
        {
            wrapper: W,
            filling: Filling,
        }
        <ABacon as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <AEggs as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASalad<C> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASausage<W> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (0u8 as i64, "Bacon".to_string(), < ABacon > ::declaration()), (1u8 as
                i64, "Eggs".to_string(), < AEggs > ::declaration()), (2u8 as i64, "Salad"
                .to_string(), < ASalad < C > > ::declaration()), (3u8 as i64, "Sausage"
                .to_string(), < ASausage < W > > ::declaration())
            ],
        };
        borsh::schema::add_definition(Self::declaration(), definition, definitions);
    }
}

