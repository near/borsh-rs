---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<W, U, C> borsh::BorshSchema for A<W, U, C>
where
    U: borsh::BorshSchema,
    C: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < U > ::declaration(), < C > ::declaration()
        ];
        format!(r#"{}<{}>"#, "A", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ABacon;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct AEggs;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ASalad<C>(Tomatoes, C, Oil);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ASausage<W, U> {
            #[borsh(skip)]
            wrapper: W,
            filling: Filling,
            unexpected: U,
        }
        <ABacon as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <AEggs as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASalad<C> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASausage<W, U> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let variants = borsh::__private::maybestd::vec![
            ("Bacon".to_string(), < ABacon > ::declaration()), ("Eggs".to_string(), <
            AEggs > ::declaration()), ("Salad".to_string(), < ASalad < C > >
            ::declaration()), ("Sausage".to_string(), < ASausage < W, U > >
            ::declaration())
        ];
        let definition = borsh::schema::Definition::Enum {
            variants,
        };
        borsh::schema::add_definition(Self::declaration(), definition, definitions);
    }
}

