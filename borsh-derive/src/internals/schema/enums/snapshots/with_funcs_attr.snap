---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<K, V> borsh::BorshSchema for C<K, V>
where
    K: borsh::BorshSchema,
    V: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < K as borsh::BorshSchema > ::declaration(), < V as borsh::BorshSchema >
            ::declaration()
        ];
        format!(r#"{}<{}>"#, "C", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct CC3(u64, u64);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct CC4<K, V>(
            u64,
            #[borsh(
                schema(
                    with_funcs(
                        declaration = "third_party_impl::declaration::<K, V>",
                        definitions = "third_party_impl::add_definitions_recursively::<K, V>"
                    )
                )
            )]
            ThirdParty<K, V>,
        );
        <CC3 as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <CC4<K, V> as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (u8::from(0u8) as i64, "C3".into(), < CC3 as borsh::BorshSchema >
                ::declaration()), (u8::from(1u8) as i64, "C4".into(), < CC4 < K, V > as
                borsh::BorshSchema > ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}

