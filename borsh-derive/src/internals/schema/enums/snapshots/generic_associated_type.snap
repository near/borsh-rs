---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<T, K, V> borsh::BorshSchema for EnumParametrized<T, K, V>
where
    K: TraitName,
    K: core::cmp::Ord,
    V: core::cmp::Ord,
    T: Eq + Hash,
    T: borsh::BorshSchema,
    K: borsh::BorshSchema,
    K::Associated: borsh::BorshSchema,
    V: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < T as borsh::BorshSchema > ::declaration(), < K as borsh::BorshSchema >
            ::declaration(), < K::Associated as borsh::BorshSchema > ::declaration(), < V
            as borsh::BorshSchema > ::declaration()
        ];
        format!(r#"{}<{}>"#, "EnumParametrized", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct EnumParametrizedB<K, V>
        where
            K: TraitName,
            K: core::cmp::Ord,
            V: core::cmp::Ord,
        {
            x: BTreeMap<K, V>,
            y: String,
            z: K::Associated,
        }
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct EnumParametrizedC<T>(
            T,
            u16,
        )
        where
            T: Eq + Hash;
        <EnumParametrizedB<
            K,
            V,
        > as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <EnumParametrizedC<
            T,
        > as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (u8::from(0u8) as i64, "B".into(), < EnumParametrizedB < K, V > as
                borsh::BorshSchema > ::declaration()), (u8::from(1u8) as i64, "C".into(),
                < EnumParametrizedC < T > as borsh::BorshSchema > ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}

