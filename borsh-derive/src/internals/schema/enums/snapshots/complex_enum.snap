---
source: borsh-derive/src/internals/schema/enums/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl borsh::BorshSchema for A {
    fn declaration() -> borsh::schema::Declaration {
        "A".to_string()
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ABacon;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct AEggs;
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ASalad(Tomatoes, Cucumber, Oil);
        #[allow(dead_code)]
        #[derive(borsh::BorshSchema)]
        #[borsh(crate = "borsh")]
        struct ASausage {
            wrapper: Wrapper,
            filling: Filling,
        }
        <ABacon as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <AEggs as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASalad as borsh::BorshSchema>::add_definitions_recursively(definitions);
        <ASausage as borsh::BorshSchema>::add_definitions_recursively(definitions);
        let discriminant_0: u8 = 0u8;
        let discriminant_1: u8 = 1u8;
        let discriminant_2: u8 = 2u8;
        let discriminant_3: u8 = 3u8;
        let definition = borsh::schema::Definition::Enum {
            tag_width: 1,
            variants: borsh::__private::maybestd::vec![
                (discriminant_0 as i64, "Bacon".to_string(), < ABacon as
                borsh::BorshSchema > ::declaration()), (discriminant_1 as i64, "Eggs"
                .to_string(), < AEggs as borsh::BorshSchema > ::declaration()),
                (discriminant_2 as i64, "Salad".to_string(), < ASalad as
                borsh::BorshSchema > ::declaration()), (discriminant_3 as i64, "Sausage"
                .to_string(), < ASausage as borsh::BorshSchema > ::declaration())
            ],
        };
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
    }
}

