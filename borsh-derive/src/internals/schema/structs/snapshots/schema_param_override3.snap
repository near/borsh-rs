---
source: borsh-derive/src/internals/schema/structs/mod.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl<K: EntityRef, V> borsh::BorshSchema for A<K, V>
where
    V: borsh::BorshSchema,
{
    fn declaration() -> borsh::schema::Declaration {
        let params = borsh::__private::maybestd::vec![
            < V as borsh::BorshSchema > ::declaration()
        ];
        format!(r#"{}<{}>"#, "A", params.join(", "))
    }
    fn add_definitions_recursively(
        definitions: &mut borsh::__private::maybestd::collections::BTreeMap<
            borsh::schema::Declaration,
            borsh::schema::Definition,
        >,
    ) {
        let fields = borsh::schema::Fields::NamedFields(
            borsh::__private::maybestd::vec![
                ("x".to_string(), < PrimaryMap < K, V > as borsh::BorshSchema >
                ::declaration()), ("y".to_string(), < String as borsh::BorshSchema >
                ::declaration())
            ],
        );
        let definition = borsh::schema::Definition::Struct {
            fields,
        };
        let no_recursion_flag = definitions
            .get(&<Self as borsh::BorshSchema>::declaration())
            .is_none();
        borsh::schema::add_definition(
            <Self as borsh::BorshSchema>::declaration(),
            definition,
            definitions,
        );
        if no_recursion_flag {
            <PrimaryMap<
                K,
                V,
            > as borsh::BorshSchema>::add_definitions_recursively(definitions);
            <String as borsh::BorshSchema>::add_definitions_recursively(definitions);
        }
    }
}

